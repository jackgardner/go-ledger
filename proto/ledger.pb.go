// Code generated by protoc-gen-go.
// source: ledger.proto
// DO NOT EDIT!

/*
Package ledger is a generated protocol buffer package.

It is generated from these files:
	ledger.proto

It has these top-level messages:
	CreateTransactionRequest
	Transaction
	GetTransactionRequest
	ListTransactionsRequest
	TransactionsReply
*/
package ledger

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type CreateTransactionRequest struct {
	PartyId             string `protobuf:"bytes,1,opt,name=partyId" json:"partyId,omitempty"`
	SourceLedgerId      string `protobuf:"bytes,2,opt,name=sourceLedgerId" json:"sourceLedgerId,omitempty"`
	DestinationLedgerId string `protobuf:"bytes,3,opt,name=destinationLedgerId" json:"destinationLedgerId,omitempty"`
	AmountInPence       int32  `protobuf:"varint,4,opt,name=amountInPence" json:"amountInPence,omitempty"`
}

func (m *CreateTransactionRequest) Reset()                    { *m = CreateTransactionRequest{} }
func (m *CreateTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*CreateTransactionRequest) ProtoMessage()               {}
func (*CreateTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *CreateTransactionRequest) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *CreateTransactionRequest) GetSourceLedgerId() string {
	if m != nil {
		return m.SourceLedgerId
	}
	return ""
}

func (m *CreateTransactionRequest) GetDestinationLedgerId() string {
	if m != nil {
		return m.DestinationLedgerId
	}
	return ""
}

func (m *CreateTransactionRequest) GetAmountInPence() int32 {
	if m != nil {
		return m.AmountInPence
	}
	return 0
}

type Transaction struct {
	Success       bool   `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
	TransactionId string `protobuf:"bytes,2,opt,name=transactionId" json:"transactionId,omitempty"`
	AmountInPence int32  `protobuf:"varint,3,opt,name=amountInPence" json:"amountInPence,omitempty"`
}

func (m *Transaction) Reset()                    { *m = Transaction{} }
func (m *Transaction) String() string            { return proto.CompactTextString(m) }
func (*Transaction) ProtoMessage()               {}
func (*Transaction) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Transaction) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *Transaction) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

func (m *Transaction) GetAmountInPence() int32 {
	if m != nil {
		return m.AmountInPence
	}
	return 0
}

type GetTransactionRequest struct {
	TransactionId string `protobuf:"bytes,1,opt,name=transactionId" json:"transactionId,omitempty"`
}

func (m *GetTransactionRequest) Reset()                    { *m = GetTransactionRequest{} }
func (m *GetTransactionRequest) String() string            { return proto.CompactTextString(m) }
func (*GetTransactionRequest) ProtoMessage()               {}
func (*GetTransactionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetTransactionRequest) GetTransactionId() string {
	if m != nil {
		return m.TransactionId
	}
	return ""
}

type ListTransactionsRequest struct {
	PartyId        string `protobuf:"bytes,1,opt,name=partyId" json:"partyId,omitempty"`
	SourceLedgerId string `protobuf:"bytes,2,opt,name=sourceLedgerId" json:"sourceLedgerId,omitempty"`
}

func (m *ListTransactionsRequest) Reset()                    { *m = ListTransactionsRequest{} }
func (m *ListTransactionsRequest) String() string            { return proto.CompactTextString(m) }
func (*ListTransactionsRequest) ProtoMessage()               {}
func (*ListTransactionsRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ListTransactionsRequest) GetPartyId() string {
	if m != nil {
		return m.PartyId
	}
	return ""
}

func (m *ListTransactionsRequest) GetSourceLedgerId() string {
	if m != nil {
		return m.SourceLedgerId
	}
	return ""
}

type TransactionsReply struct {
	LedgerId     string         `protobuf:"bytes,1,opt,name=ledgerId" json:"ledgerId,omitempty"`
	Transactions []*Transaction `protobuf:"bytes,2,rep,name=transactions" json:"transactions,omitempty"`
}

func (m *TransactionsReply) Reset()                    { *m = TransactionsReply{} }
func (m *TransactionsReply) String() string            { return proto.CompactTextString(m) }
func (*TransactionsReply) ProtoMessage()               {}
func (*TransactionsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TransactionsReply) GetLedgerId() string {
	if m != nil {
		return m.LedgerId
	}
	return ""
}

func (m *TransactionsReply) GetTransactions() []*Transaction {
	if m != nil {
		return m.Transactions
	}
	return nil
}

func init() {
	proto.RegisterType((*CreateTransactionRequest)(nil), "ledger.CreateTransactionRequest")
	proto.RegisterType((*Transaction)(nil), "ledger.Transaction")
	proto.RegisterType((*GetTransactionRequest)(nil), "ledger.GetTransactionRequest")
	proto.RegisterType((*ListTransactionsRequest)(nil), "ledger.ListTransactionsRequest")
	proto.RegisterType((*TransactionsReply)(nil), "ledger.TransactionsReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Ledger service

type LedgerClient interface {
	CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*Transaction, error)
	GetTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*TransactionsReply, error)
	GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*Transaction, error)
}

type ledgerClient struct {
	cc *grpc.ClientConn
}

func NewLedgerClient(cc *grpc.ClientConn) LedgerClient {
	return &ledgerClient{cc}
}

func (c *ledgerClient) CreateTransaction(ctx context.Context, in *CreateTransactionRequest, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := grpc.Invoke(ctx, "/ledger.Ledger/CreateTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerClient) GetTransactions(ctx context.Context, in *ListTransactionsRequest, opts ...grpc.CallOption) (*TransactionsReply, error) {
	out := new(TransactionsReply)
	err := grpc.Invoke(ctx, "/ledger.Ledger/GetTransactions", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ledgerClient) GetTransaction(ctx context.Context, in *GetTransactionRequest, opts ...grpc.CallOption) (*Transaction, error) {
	out := new(Transaction)
	err := grpc.Invoke(ctx, "/ledger.Ledger/GetTransaction", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Ledger service

type LedgerServer interface {
	CreateTransaction(context.Context, *CreateTransactionRequest) (*Transaction, error)
	GetTransactions(context.Context, *ListTransactionsRequest) (*TransactionsReply, error)
	GetTransaction(context.Context, *GetTransactionRequest) (*Transaction, error)
}

func RegisterLedgerServer(s *grpc.Server, srv LedgerServer) {
	s.RegisterService(&_Ledger_serviceDesc, srv)
}

func _Ledger_CreateTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServer).CreateTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.Ledger/CreateTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServer).CreateTransaction(ctx, req.(*CreateTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ledger_GetTransactions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTransactionsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServer).GetTransactions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.Ledger/GetTransactions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServer).GetTransactions(ctx, req.(*ListTransactionsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ledger_GetTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerServer).GetTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ledger.Ledger/GetTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerServer).GetTransaction(ctx, req.(*GetTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Ledger_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ledger.Ledger",
	HandlerType: (*LedgerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTransaction",
			Handler:    _Ledger_CreateTransaction_Handler,
		},
		{
			MethodName: "GetTransactions",
			Handler:    _Ledger_GetTransactions_Handler,
		},
		{
			MethodName: "GetTransaction",
			Handler:    _Ledger_GetTransaction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ledger.proto",
}

func init() { proto.RegisterFile("ledger.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x93, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x9b, 0x56, 0x6b, 0x9d, 0xd6, 0x4a, 0xa7, 0x88, 0xb1, 0x20, 0x86, 0x45, 0xa4, 0xa7,
	0x22, 0xf5, 0xe0, 0xc9, 0x93, 0xa0, 0x14, 0x0a, 0x4a, 0xf0, 0xe6, 0x69, 0x4d, 0x06, 0x2d, 0xd4,
	0x4d, 0xdd, 0xd9, 0x1c, 0xfa, 0x5e, 0xbe, 0x97, 0xaf, 0x20, 0x4d, 0xdc, 0x9a, 0xb5, 0xdb, 0x9b,
	0xc7, 0x99, 0xfc, 0xfb, 0xfd, 0xff, 0x4e, 0x66, 0xa1, 0x33, 0xa7, 0xf4, 0x95, 0xf4, 0x68, 0xa1,
	0x33, 0x93, 0x61, 0xb3, 0xac, 0xc4, 0x67, 0x00, 0xe1, 0xad, 0x26, 0x69, 0xe8, 0x49, 0x4b, 0xc5,
	0x32, 0x31, 0xb3, 0x4c, 0xc5, 0xf4, 0x91, 0x13, 0x1b, 0x0c, 0x61, 0x6f, 0x21, 0xb5, 0x59, 0x4e,
	0xd2, 0x30, 0x88, 0x82, 0xe1, 0x7e, 0x6c, 0x4b, 0xbc, 0x80, 0x2e, 0x67, 0xb9, 0x4e, 0x68, 0x5a,
	0x60, 0x26, 0x69, 0x58, 0x2f, 0x04, 0x7f, 0xba, 0x78, 0x09, 0xfd, 0x94, 0xd8, 0xcc, 0x94, 0x5c,
	0x71, 0xd7, 0xe2, 0x46, 0x21, 0xf6, 0x7d, 0xc2, 0x73, 0x38, 0x90, 0xef, 0x59, 0xae, 0xcc, 0x44,
	0x3d, 0x92, 0x4a, 0x28, 0xdc, 0x89, 0x82, 0xe1, 0x6e, 0xec, 0x36, 0x05, 0x43, 0xbb, 0x92, 0x77,
	0x15, 0x94, 0xf3, 0x24, 0x21, 0xe6, 0x22, 0x68, 0x2b, 0xb6, 0xe5, 0x0a, 0x67, 0x7e, 0x85, 0xeb,
	0x9c, 0x6e, 0x73, 0xd3, 0xb4, 0xe1, 0x33, 0xbd, 0x81, 0xa3, 0x7b, 0x32, 0x9e, 0x39, 0x6d, 0x98,
	0x04, 0x1e, 0x13, 0xf1, 0x0c, 0xc7, 0xd3, 0x19, 0x57, 0xcf, 0xf3, 0xbf, 0x0d, 0x5a, 0xbc, 0x41,
	0xcf, 0x05, 0x2f, 0xe6, 0x4b, 0x1c, 0x40, 0x6b, 0x6e, 0x8f, 0x95, 0xdc, 0x75, 0x8d, 0xd7, 0xd0,
	0xa9, 0xc4, 0xe3, 0xb0, 0x1e, 0x35, 0x86, 0xed, 0x71, 0x7f, 0xf4, 0xb3, 0x25, 0xd5, 0x5b, 0x3a,
	0xc2, 0xf1, 0x57, 0x00, 0xcd, 0xd2, 0x16, 0xa7, 0xd0, 0xdb, 0xd8, 0x1d, 0x8c, 0x2c, 0x62, 0xdb,
	0x5a, 0x0d, 0x7c, 0x26, 0xa2, 0x86, 0x0f, 0x70, 0xe8, 0x8e, 0x97, 0xf1, 0xcc, 0x2a, 0xb7, 0x0c,
	0x6e, 0x70, 0xe2, 0x41, 0x95, 0x97, 0x17, 0x35, 0xbc, 0x83, 0xae, 0x0b, 0xc4, 0x53, 0x2b, 0xf7,
	0xfe, 0xc7, 0x2d, 0xc1, 0x5e, 0x9a, 0xc5, 0x93, 0xb9, 0xfa, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xe7,
	0x60, 0x31, 0xfd, 0x42, 0x03, 0x00, 0x00,
}
